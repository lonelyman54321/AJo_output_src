/*
 * Decompiled with CFR 0.152.
 */
package com.google.zxing.datamatrix.encoder;

import com.google.zxing.datamatrix.encoder.SymbolInfo;

public final class ErrorCorrection {
    private static final int[] ALOG;
    private static final int[][] FACTORS;
    private static final int[] FACTOR_SETS;
    private static final int[] LOG;
    private static final int MODULO_VALUE = 301;

    static {
        int[] nArray;
        int[] nArray2;
        int[] nArray3;
        int[] nArray4;
        int[] nArray5;
        int[] nArray6;
        int[] nArray7;
        int[] nArray8;
        int[] nArray9;
        int[] nArray10;
        int[] nArray11;
        int[] nArray12;
        int[] nArray13;
        int[] nArray14;
        int[] nArray15;
        int n3 = 18;
        int n4 = 28;
        int n7 = 36;
        int n8 = 16;
        int[] nArray16 = nArray15 = new int[n8];
        int[] nArray17 = nArray15;
        nArray16[0] = 5;
        nArray17[1] = 7;
        nArray16[2] = 10;
        nArray17[3] = 11;
        nArray16[4] = 12;
        nArray17[5] = 14;
        nArray16[6] = 18;
        nArray17[7] = 20;
        nArray16[8] = 24;
        nArray17[9] = 28;
        nArray16[10] = 36;
        nArray17[11] = 42;
        nArray16[12] = 48;
        nArray17[13] = 56;
        nArray16[14] = 62;
        nArray17[15] = 68;
        FACTOR_SETS = nArray15;
        int[] nArray18 = nArray15 = new int[7];
        int[] nArray19 = nArray15;
        nArray18[0] = 23;
        nArray19[1] = 68;
        nArray18[2] = 144;
        nArray19[3] = 134;
        nArray18[4] = 240;
        nArray19[5] = 92;
        nArray19[6] = 254;
        int[] nArray20 = nArray14 = new int[10];
        int[] nArray21 = nArray14;
        nArray20[0] = 28;
        nArray21[1] = 24;
        nArray20[2] = 185;
        nArray21[3] = 166;
        nArray20[4] = 223;
        nArray21[5] = 248;
        nArray20[6] = 116;
        nArray21[7] = 255;
        nArray20[8] = 110;
        nArray21[9] = 61;
        int[] nArray22 = nArray13 = new int[11];
        int[] nArray23 = nArray13;
        nArray22[0] = 175;
        nArray23[1] = 138;
        nArray22[2] = 205;
        nArray23[3] = 12;
        nArray22[4] = 194;
        nArray23[5] = 168;
        nArray22[6] = 39;
        nArray23[7] = 245;
        nArray22[8] = 60;
        nArray23[9] = 97;
        nArray23[10] = 120;
        int[] nArray24 = nArray12 = new int[12];
        int[] nArray25 = nArray12;
        nArray24[0] = 41;
        nArray25[1] = 153;
        nArray24[2] = 158;
        nArray25[3] = 91;
        nArray24[4] = 61;
        nArray25[5] = 42;
        nArray24[6] = 142;
        nArray25[7] = 213;
        nArray24[8] = 97;
        nArray25[9] = 178;
        nArray24[10] = 100;
        nArray25[11] = 242;
        int n10 = 14;
        int[] nArray26 = nArray11 = new int[n10];
        int[] nArray27 = nArray11;
        nArray26[0] = 156;
        nArray27[1] = 97;
        nArray26[2] = 192;
        nArray27[3] = 252;
        nArray26[4] = 95;
        nArray27[5] = 9;
        nArray26[6] = 157;
        nArray27[7] = 119;
        nArray26[8] = 138;
        nArray27[9] = 45;
        nArray26[10] = 18;
        nArray27[11] = 186;
        nArray26[12] = 83;
        nArray27[13] = 185;
        int[] nArray28 = nArray10 = new int[n3];
        int[] nArray29 = nArray10;
        nArray28[0] = 83;
        nArray29[1] = 195;
        nArray28[2] = 100;
        nArray29[3] = 39;
        nArray28[4] = 188;
        nArray29[5] = 75;
        nArray28[6] = 66;
        nArray29[7] = 61;
        nArray28[8] = 241;
        nArray29[9] = 213;
        nArray28[10] = 109;
        nArray29[11] = 129;
        nArray28[12] = 94;
        nArray29[13] = 254;
        nArray28[14] = 225;
        nArray29[15] = 48;
        nArray28[16] = 90;
        nArray29[17] = 188;
        int n14 = 20;
        int[] nArray30 = nArray9 = new int[n14];
        int[] nArray31 = nArray9;
        nArray30[0] = 15;
        nArray31[1] = 195;
        nArray30[2] = 244;
        nArray31[3] = 9;
        nArray30[4] = 233;
        nArray31[5] = 71;
        nArray30[6] = 168;
        nArray31[7] = 2;
        nArray30[8] = 188;
        nArray31[9] = 160;
        nArray30[10] = 153;
        nArray31[11] = 145;
        nArray30[12] = 253;
        nArray31[13] = 79;
        nArray30[14] = 108;
        nArray31[15] = 82;
        nArray30[16] = 27;
        nArray31[17] = 174;
        nArray30[18] = 186;
        nArray31[19] = 172;
        int[] nArray32 = nArray8 = new int[24];
        int[] nArray33 = nArray8;
        nArray32[0] = 52;
        nArray33[1] = 190;
        nArray32[2] = 88;
        nArray33[3] = 205;
        nArray32[4] = 109;
        nArray33[5] = 39;
        nArray32[6] = 176;
        nArray33[7] = 21;
        nArray32[8] = 155;
        nArray33[9] = 197;
        nArray32[10] = 251;
        nArray33[11] = 223;
        nArray32[12] = 155;
        nArray33[13] = 21;
        nArray32[14] = 5;
        nArray33[15] = 172;
        nArray32[16] = 254;
        nArray33[17] = 124;
        nArray32[18] = 12;
        nArray33[19] = 181;
        nArray32[20] = 184;
        nArray33[21] = 96;
        nArray32[22] = 50;
        nArray33[23] = 193;
        int[] nArray34 = nArray7 = new int[n4];
        int[] nArray35 = nArray7;
        nArray34[0] = 211;
        nArray35[1] = 231;
        nArray34[2] = 43;
        nArray35[3] = 97;
        nArray34[4] = 71;
        nArray35[5] = 96;
        nArray34[6] = 103;
        nArray35[7] = 174;
        nArray34[8] = 37;
        nArray35[9] = 151;
        nArray34[10] = 170;
        nArray35[11] = 53;
        nArray34[12] = 75;
        nArray35[13] = 34;
        nArray34[14] = 249;
        nArray35[15] = 121;
        nArray34[16] = 17;
        nArray35[17] = 138;
        nArray34[18] = 110;
        nArray35[19] = 213;
        nArray34[20] = 141;
        nArray35[21] = 136;
        nArray34[22] = 120;
        nArray35[23] = 151;
        nArray34[24] = 233;
        nArray35[25] = 168;
        nArray34[26] = 93;
        nArray35[27] = 255;
        int[] nArray36 = nArray6 = new int[n7];
        int[] nArray37 = nArray6;
        nArray36[0] = 245;
        nArray37[1] = 127;
        nArray36[2] = 242;
        nArray37[3] = 218;
        nArray36[4] = 130;
        nArray37[5] = 250;
        nArray36[6] = 162;
        nArray37[7] = 181;
        nArray36[8] = 102;
        nArray37[9] = 120;
        nArray36[10] = 84;
        nArray37[11] = 179;
        nArray36[12] = 220;
        nArray37[13] = 251;
        nArray36[14] = 80;
        nArray37[15] = 182;
        nArray36[16] = 229;
        nArray37[17] = 18;
        nArray36[18] = 2;
        nArray37[19] = 4;
        nArray36[20] = 68;
        nArray37[21] = 33;
        nArray36[22] = 101;
        nArray37[23] = 137;
        nArray36[24] = 95;
        nArray37[25] = 119;
        nArray36[26] = 115;
        nArray37[27] = 44;
        nArray36[28] = 175;
        nArray37[29] = 184;
        nArray36[30] = 59;
        nArray37[31] = 25;
        nArray36[32] = 225;
        nArray37[33] = 98;
        nArray36[34] = 81;
        nArray37[35] = 112;
        int[] nArray38 = nArray5 = new int[42];
        int[] nArray39 = nArray5;
        nArray38[0] = 77;
        nArray39[1] = 193;
        nArray38[2] = 137;
        nArray39[3] = 31;
        nArray38[4] = 19;
        nArray39[5] = 38;
        nArray38[6] = 22;
        nArray39[7] = 153;
        nArray38[8] = 247;
        nArray39[9] = 105;
        nArray38[10] = 122;
        nArray39[11] = 2;
        nArray38[12] = 245;
        nArray39[13] = 133;
        nArray38[14] = 242;
        nArray39[15] = 8;
        nArray38[16] = 175;
        nArray39[17] = 95;
        nArray38[18] = 100;
        nArray39[19] = 9;
        nArray38[20] = 167;
        nArray39[21] = 105;
        nArray38[22] = 214;
        nArray39[23] = 111;
        nArray38[24] = 57;
        nArray39[25] = 121;
        nArray38[26] = 21;
        nArray39[27] = 1;
        nArray38[28] = 253;
        nArray39[29] = 57;
        nArray38[30] = 54;
        nArray39[31] = 101;
        nArray38[32] = 248;
        nArray39[33] = 202;
        nArray38[34] = 69;
        nArray39[35] = 50;
        nArray38[36] = 150;
        nArray39[37] = 177;
        nArray38[38] = 226;
        nArray39[39] = 5;
        nArray38[40] = 9;
        nArray39[41] = 5;
        int[] nArray40 = nArray4 = new int[48];
        int[] nArray41 = nArray4;
        nArray40[0] = 245;
        nArray41[1] = 132;
        nArray40[2] = 172;
        nArray41[3] = 223;
        nArray40[4] = 96;
        nArray41[5] = 32;
        nArray40[6] = 117;
        nArray41[7] = 22;
        nArray40[8] = 238;
        nArray41[9] = 133;
        nArray40[10] = 238;
        nArray41[11] = 231;
        nArray40[12] = 205;
        nArray41[13] = 188;
        nArray40[14] = 237;
        nArray41[15] = 87;
        nArray40[16] = 191;
        nArray41[17] = 106;
        nArray40[18] = 16;
        nArray41[19] = 147;
        nArray40[20] = 118;
        nArray41[21] = 23;
        nArray40[22] = 37;
        nArray41[23] = 90;
        nArray40[24] = 170;
        nArray41[25] = 205;
        nArray40[26] = 131;
        nArray41[27] = 88;
        nArray40[28] = 120;
        nArray41[29] = 100;
        nArray40[30] = 66;
        nArray41[31] = 138;
        nArray40[32] = 186;
        nArray41[33] = 240;
        nArray40[34] = 82;
        nArray41[35] = 44;
        nArray40[36] = 176;
        nArray41[37] = 87;
        nArray40[38] = 187;
        nArray41[39] = 147;
        nArray40[40] = 160;
        nArray41[41] = 175;
        nArray40[42] = 69;
        nArray41[43] = 213;
        nArray40[44] = 92;
        nArray41[45] = 253;
        nArray40[46] = 225;
        nArray41[47] = 19;
        int[] nArray42 = nArray3 = new int[56];
        int[] nArray43 = nArray3;
        nArray42[0] = 175;
        nArray43[1] = 9;
        nArray42[2] = 223;
        nArray43[3] = 238;
        nArray42[4] = 12;
        nArray43[5] = 17;
        nArray42[6] = 220;
        nArray43[7] = 208;
        nArray42[8] = 100;
        nArray43[9] = 29;
        nArray42[10] = 175;
        nArray43[11] = 170;
        nArray42[12] = 230;
        nArray43[13] = 192;
        nArray42[14] = 215;
        nArray43[15] = 235;
        nArray42[16] = 150;
        nArray43[17] = 159;
        nArray42[18] = 36;
        nArray43[19] = 223;
        nArray42[20] = 38;
        nArray43[21] = 200;
        nArray42[22] = 132;
        nArray43[23] = 54;
        nArray42[24] = 228;
        nArray43[25] = 146;
        nArray42[26] = 218;
        nArray43[27] = 234;
        nArray42[28] = 117;
        nArray43[29] = 203;
        nArray42[30] = 29;
        nArray43[31] = 232;
        nArray42[32] = 144;
        nArray43[33] = 238;
        nArray42[34] = 22;
        nArray43[35] = 150;
        nArray42[36] = 201;
        nArray43[37] = 117;
        nArray42[38] = 62;
        nArray43[39] = 207;
        nArray42[40] = 164;
        nArray43[41] = 13;
        nArray42[42] = 137;
        nArray43[43] = 245;
        nArray42[44] = 127;
        nArray43[45] = 67;
        nArray42[46] = 247;
        nArray43[47] = 28;
        nArray42[48] = 155;
        nArray43[49] = 43;
        nArray42[50] = 203;
        nArray43[51] = 107;
        nArray42[52] = 233;
        nArray43[53] = 53;
        nArray42[54] = 143;
        nArray43[55] = 46;
        int[] nArray44 = nArray2 = new int[62];
        int[] nArray45 = nArray2;
        nArray44[0] = 242;
        nArray45[1] = 93;
        nArray44[2] = 169;
        nArray45[3] = 50;
        nArray44[4] = 144;
        nArray45[5] = 210;
        nArray44[6] = 39;
        nArray45[7] = 118;
        nArray44[8] = 202;
        nArray45[9] = 188;
        nArray44[10] = 201;
        nArray45[11] = 189;
        nArray44[12] = 143;
        nArray45[13] = 108;
        nArray44[14] = 196;
        nArray45[15] = 37;
        nArray44[16] = 185;
        nArray45[17] = 112;
        nArray44[18] = 134;
        nArray45[19] = 230;
        nArray44[20] = 245;
        nArray45[21] = 63;
        nArray44[22] = 197;
        nArray45[23] = 190;
        nArray44[24] = 250;
        nArray45[25] = 106;
        nArray44[26] = 185;
        nArray45[27] = 221;
        nArray44[28] = 175;
        nArray45[29] = 64;
        nArray44[30] = 114;
        nArray45[31] = 71;
        nArray44[32] = 161;
        nArray45[33] = 44;
        nArray44[34] = 147;
        nArray45[35] = 6;
        nArray44[36] = 27;
        nArray45[37] = 218;
        nArray44[38] = 51;
        nArray45[39] = 63;
        nArray44[40] = 87;
        nArray45[41] = 10;
        nArray44[42] = 40;
        nArray45[43] = 130;
        nArray44[44] = 188;
        nArray45[45] = 17;
        nArray44[46] = 163;
        nArray45[47] = 31;
        nArray44[48] = 176;
        nArray45[49] = 170;
        nArray44[50] = 4;
        nArray45[51] = 107;
        nArray44[52] = 232;
        nArray45[53] = 7;
        nArray44[54] = 94;
        nArray45[55] = 166;
        nArray44[56] = 224;
        nArray45[57] = 124;
        nArray44[58] = 86;
        nArray45[59] = 47;
        nArray44[60] = 11;
        nArray45[61] = 204;
        int[] nArray46 = nArray = new int[68];
        int[] nArray47 = nArray;
        nArray46[0] = 220;
        nArray47[1] = 228;
        nArray46[2] = 173;
        nArray47[3] = 89;
        nArray46[4] = 251;
        nArray47[5] = 149;
        nArray46[6] = 159;
        nArray47[7] = 56;
        nArray46[8] = 89;
        nArray47[9] = 33;
        nArray46[10] = 147;
        nArray47[11] = 244;
        nArray46[12] = 154;
        nArray47[13] = 36;
        nArray46[14] = 73;
        nArray47[15] = 127;
        nArray46[16] = 213;
        nArray47[17] = 136;
        nArray46[18] = 248;
        nArray47[19] = 180;
        nArray46[20] = 234;
        nArray47[21] = 197;
        nArray46[22] = 158;
        nArray47[23] = 177;
        nArray46[24] = 68;
        nArray47[25] = 122;
        nArray46[26] = 93;
        nArray47[27] = 213;
        nArray46[28] = 15;
        nArray47[29] = 160;
        nArray46[30] = 227;
        nArray47[31] = 236;
        nArray46[32] = 66;
        nArray47[33] = 139;
        nArray46[34] = 153;
        nArray47[35] = 185;
        nArray46[36] = 202;
        nArray47[37] = 167;
        nArray46[38] = 179;
        nArray47[39] = 25;
        nArray46[40] = 220;
        nArray47[41] = 232;
        nArray46[42] = 96;
        nArray47[43] = 210;
        nArray46[44] = 231;
        nArray47[45] = 136;
        nArray46[46] = 223;
        nArray47[47] = 239;
        nArray46[48] = 181;
        nArray47[49] = 241;
        nArray46[50] = 59;
        nArray47[51] = 52;
        nArray46[52] = 172;
        nArray47[53] = 25;
        nArray46[54] = 49;
        nArray47[55] = 232;
        nArray46[56] = 211;
        nArray47[57] = 189;
        nArray46[58] = 64;
        nArray47[59] = 54;
        nArray46[60] = 108;
        nArray47[61] = 153;
        nArray46[62] = 132;
        nArray47[63] = 63;
        nArray46[64] = 96;
        nArray47[65] = 103;
        nArray46[66] = 82;
        nArray47[67] = 186;
        int[][] nArrayArray = new int[16][];
        int[] nArray48 = nArray;
        int n15 = 15;
        int n16 = 48;
        nArray = new int[]{228, n16, n15, 111, 62};
        nArrayArray[0] = nArray;
        nArrayArray[1] = nArray15;
        nArrayArray[2] = nArray14;
        nArrayArray[3] = nArray13;
        nArrayArray[4] = nArray12;
        nArrayArray[5] = nArray11;
        nArrayArray[6] = nArray10;
        nArrayArray[7] = nArray9;
        nArrayArray[8] = nArray8;
        nArrayArray[9] = nArray7;
        nArrayArray[10] = nArray6;
        nArrayArray[11] = nArray5;
        nArrayArray[12] = nArray4;
        nArrayArray[13] = nArray3;
        nArrayArray[14] = nArray2;
        nArrayArray[15] = nArray48;
        FACTORS = nArrayArray;
        int n17 = 256;
        nArray = new int[n17];
        LOG = nArray;
        int n18 = 255;
        nArray3 = new int[n18];
        ALOG = nArray3;
        int n19 = 1;
        nArray4 = null;
        int n20 = 1;
        for (int i3 = 0; i3 < n18; ++i3) {
            ErrorCorrection.ALOG[i3] = n20;
            nArray9 = LOG;
            nArray9[n20] = i3;
            if ((n20 <<= n19) < n17) continue;
            n20 ^= 0x12D;
        }
    }

    private ErrorCorrection() {
    }

    private static String createECCBlock(CharSequence charSequence, int n3) {
        int n4 = charSequence.length();
        return ErrorCorrection.createECCBlock(charSequence, 0, n4, n3);
    }

    private static String createECCBlock(CharSequence object, int n3, int n4, int n7) {
        Object[] objectArray;
        int n8;
        int n10;
        int[] nArray;
        int n14;
        block9: {
            n14 = 0;
            nArray = null;
            for (n10 = 0; n10 < (n8 = (objectArray = FACTOR_SETS).length); ++n10) {
                int n15 = objectArray[n10];
                if (n15 != n7) {
                    continue;
                }
                break block9;
            }
            n10 = -1;
        }
        if (n10 >= 0) {
            int n16;
            nArray = FACTORS[n10];
            objectArray = new char[n7];
            for (n8 = 0; n8 < n7; ++n8) {
                objectArray[n8] = 0;
            }
            for (n8 = n3; n8 < (n16 = n3 + n4); ++n8) {
                int n17 = objectArray[n16];
                int n18 = object.charAt(n8);
                n17 ^= n18;
                for (n16 = n7 + -1; n16 > 0; n16 += -1) {
                    if (n17 != 0 && (n18 = nArray[n16]) != 0) {
                        int n19 = n16 + -1;
                        n19 = objectArray[n19];
                        int[] nArray2 = ALOG;
                        int[] nArray3 = LOG;
                        int n20 = nArray3[n17];
                        n18 = nArray3[n18];
                        n20 = (n20 + n18) % 255;
                        objectArray[n16] = n18 = (int)((char)(nArray2[n20] ^ n19));
                        continue;
                    }
                    n18 = n16 + -1;
                    objectArray[n16] = n18 = objectArray[n18];
                }
                if (n17 != 0 && (n16 = nArray[0]) != 0) {
                    int[] nArray4 = ALOG;
                    int[] nArray5 = LOG;
                    n17 = nArray5[n17];
                    n16 = nArray5[n16];
                    n17 = (n17 + n16) % 255;
                    objectArray[0] = n16 = (int)((char)nArray4[n17]);
                    continue;
                }
                objectArray[0] = 0;
            }
            object = new char[n7];
            while (n14 < n7) {
                n3 = n7 - n14 + -1;
                n3 = objectArray[n3];
                object[n14] = n3;
                ++n14;
            }
            return String.valueOf((char[])object);
        }
        String string2 = String.valueOf(n7);
        String string3 = "Illegal number of error correction codewords specified: ".concat(string2);
        object = new IllegalArgumentException(string3);
        throw object;
    }

    public static String encodeECC200(String object, SymbolInfo symbolInfo) {
        int n3;
        int n4 = ((String)object).length();
        if (n4 == (n3 = symbolInfo.getDataCapacity())) {
            n3 = symbolInfo.getDataCapacity();
            int n7 = symbolInfo.getErrorCodewords() + n3;
            StringBuilder stringBuilder = new StringBuilder(n7);
            stringBuilder.append((String)object);
            n3 = symbolInfo.getInterleavedBlockCount();
            n7 = 1;
            if (n3 == n7) {
                int n8 = symbolInfo.getErrorCodewords();
                object = ErrorCorrection.createECCBlock((CharSequence)object, n8);
                stringBuilder.append((String)object);
            } else {
                int n10;
                int n14;
                int n15;
                n7 = stringBuilder.capacity();
                stringBuilder.setLength(n7);
                int[] nArray = new int[n3];
                int[] nArray2 = new int[n3];
                int[] nArray3 = new int[n3];
                int n16 = 0;
                CharSequence charSequence = null;
                while (n16 < n3) {
                    n15 = n16 + 1;
                    nArray[n16] = n14 = symbolInfo.getDataLengthForInterleavedBlock(n15);
                    nArray2[n16] = n14 = symbolInfo.getErrorLengthForInterleavedBlock(n15);
                    nArray3[n16] = 0;
                    if (n16 > 0) {
                        n14 = n16 + -1;
                        n14 = nArray3[n14];
                        n10 = nArray[n16];
                        nArray3[n16] = n14 += n10;
                    }
                    n16 = n15;
                }
                nArray3 = null;
                for (int i3 = 0; i3 < n3; ++i3) {
                    n15 = nArray[i3];
                    charSequence = new StringBuilder(n15);
                    for (n15 = i3; n15 < (n14 = symbolInfo.getDataCapacity()); n15 += n3) {
                        n14 = ((String)object).charAt(n15);
                        ((StringBuilder)charSequence).append((char)n14);
                    }
                    charSequence = ((StringBuilder)charSequence).toString();
                    n15 = nArray2[i3];
                    charSequence = ErrorCorrection.createECCBlock(charSequence, n15);
                    n14 = 0;
                    for (n15 = i3; n15 < (n10 = nArray2[i3] * n3); n15 += n3) {
                        n10 = symbolInfo.getDataCapacity() + n15;
                        int n17 = n14 + 1;
                        n14 = ((String)charSequence).charAt(n14);
                        stringBuilder.setCharAt(n10, (char)n14);
                        n14 = n17;
                    }
                }
            }
            return stringBuilder.toString();
        }
        object = new IllegalArgumentException("The number of codewords does not match the selected symbol");
        throw object;
    }
}

