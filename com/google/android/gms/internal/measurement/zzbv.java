/*
 * Decompiled with CFR 0.152.
 */
package com.google.android.gms.internal.measurement;

import java.util.HashMap;
import java.util.Map;

public final class zzbv
extends Enum {
    public static final /* enum */ zzbv zza;
    public static final /* enum */ zzbv zzaa;
    public static final /* enum */ zzbv zzab;
    public static final /* enum */ zzbv zzac;
    public static final /* enum */ zzbv zzad;
    public static final /* enum */ zzbv zzae;
    public static final /* enum */ zzbv zzaf;
    public static final /* enum */ zzbv zzag;
    public static final /* enum */ zzbv zzah;
    public static final /* enum */ zzbv zzai;
    public static final /* enum */ zzbv zzaj;
    public static final /* enum */ zzbv zzak;
    public static final /* enum */ zzbv zzal;
    public static final /* enum */ zzbv zzam;
    public static final /* enum */ zzbv zzan;
    public static final /* enum */ zzbv zzao;
    public static final /* enum */ zzbv zzap;
    public static final /* enum */ zzbv zzaq;
    public static final /* enum */ zzbv zzar;
    public static final /* enum */ zzbv zzas;
    public static final /* enum */ zzbv zzat;
    public static final /* enum */ zzbv zzau;
    public static final /* enum */ zzbv zzav;
    public static final /* enum */ zzbv zzaw;
    public static final /* enum */ zzbv zzax;
    public static final /* enum */ zzbv zzay;
    public static final /* enum */ zzbv zzaz;
    public static final /* enum */ zzbv zzb;
    public static final /* enum */ zzbv zzba;
    public static final /* enum */ zzbv zzbb;
    public static final /* enum */ zzbv zzbc;
    public static final /* enum */ zzbv zzbd;
    public static final /* enum */ zzbv zzbe;
    public static final /* enum */ zzbv zzbf;
    public static final /* enum */ zzbv zzbg;
    public static final /* enum */ zzbv zzbh;
    public static final /* enum */ zzbv zzbi;
    public static final /* enum */ zzbv zzbj;
    private static final /* enum */ zzbv zzbk;
    private static final /* enum */ zzbv zzbl;
    private static final /* enum */ zzbv zzbm;
    private static final /* enum */ zzbv zzbn;
    private static final Map zzbo;
    private static final /* synthetic */ zzbv[] zzbp;
    public static final /* enum */ zzbv zzc;
    public static final /* enum */ zzbv zzd;
    public static final /* enum */ zzbv zze;
    public static final /* enum */ zzbv zzf;
    public static final /* enum */ zzbv zzg;
    public static final /* enum */ zzbv zzh;
    public static final /* enum */ zzbv zzi;
    public static final /* enum */ zzbv zzj;
    public static final /* enum */ zzbv zzk;
    public static final /* enum */ zzbv zzl;
    public static final /* enum */ zzbv zzm;
    public static final /* enum */ zzbv zzn;
    public static final /* enum */ zzbv zzo;
    public static final /* enum */ zzbv zzp;
    public static final /* enum */ zzbv zzq;
    public static final /* enum */ zzbv zzr;
    public static final /* enum */ zzbv zzs;
    public static final /* enum */ zzbv zzt;
    public static final /* enum */ zzbv zzu;
    public static final /* enum */ zzbv zzv;
    public static final /* enum */ zzbv zzw;
    public static final /* enum */ zzbv zzx;
    public static final /* enum */ zzbv zzy;
    public static final /* enum */ zzbv zzz;
    private final int zzbq;

    static {
        int n3;
        zzbv zzbv2;
        Object object;
        zzbv zzbv3;
        zzbv zzbv4;
        zzbv zzbv5;
        zzbv zzbv6;
        zzbv zzbv7;
        zzbv zzbv8;
        zzbv zzbv9;
        Object object2;
        zzbv zzbv10;
        zzbv zzbv11;
        zzbv[] zzbvArray = new zzbv("ADD", 0, 0);
        zza = zzbvArray;
        int n4 = 1;
        zzb = zzbv11 = new zzbv("AND", n4, n4);
        int n7 = 2;
        zzc = zzbv10 = new zzbv("APPLY", n7, n7);
        int n8 = 3;
        zzd = object2 = new zzbv("ASSIGN", n8, n8);
        int n10 = 4;
        zze = zzbv9 = new zzbv("BITWISE_AND", n10, 56);
        zzf = zzbv8 = new zzbv("BITWISE_LEFT_SHIFT", 5, 57);
        zzg = zzbv7 = new zzbv("BITWISE_NOT", 6, 58);
        int n14 = 59;
        zzh = zzbv6 = new zzbv("BITWISE_OR", 7, n14);
        int n15 = 60;
        zzi = zzbv5 = new zzbv("BITWISE_RIGHT_SHIFT", 8, n15);
        n4 = 61;
        zzj = zzbv4 = new zzbv("BITWISE_UNSIGNED_RIGHT_SHIFT", 9, n4);
        zzk = zzbv3 = new zzbv("BITWISE_XOR", 10, 62);
        Object object3 = new zzbv("BLOCK", 11, 53);
        zzl = object3;
        zzm = object = new zzbv("BREAK", 12, n10);
        zzbv zzbv12 = object;
        zzn = zzbv2 = new zzbv("CASE", 13, 5);
        zzbv zzbv13 = zzbv2;
        zzbv[] zzbvArray2 = new zzbv("CONST", 14, 52);
        zzo = zzbvArray2;
        zzbv[] zzbvArray3 = zzbvArray2;
        zzp = zzbv2 = new zzbv("CONTINUE", 15, 6);
        zzbv zzbv14 = zzbv2;
        zzbvArray2 = new zzbv("CONTROL", 16, 49);
        zzbk = zzbvArray2;
        zzbv[] zzbvArray4 = zzbvArray2;
        zzq = zzbv2 = new zzbv("CREATE_ARRAY", 17, 7);
        zzbv zzbv15 = zzbv2;
        zzbvArray2 = new zzbv("CREATE_OBJECT", 18, 8);
        zzr = zzbvArray2;
        zzbv[] zzbvArray5 = zzbvArray2;
        zzs = zzbv2 = new zzbv("DEFAULT", 19, 9);
        zzbv zzbv16 = zzbv2;
        zzbvArray2 = new zzbv("DEFINE_FUNCTION", 20, 50);
        zzt = zzbvArray2;
        zzbv[] zzbvArray6 = zzbvArray2;
        zzu = zzbv2 = new zzbv("DIVIDE", 21, 10);
        zzbv zzbv17 = zzbv2;
        zzbvArray2 = new zzbv("DO", 22, 11);
        zzbl = zzbvArray2;
        zzbv[] zzbvArray7 = zzbvArray2;
        zzv = zzbv2 = new zzbv("EQUALS", 23, 12);
        zzbv zzbv18 = zzbv2;
        zzbvArray2 = new zzbv("EXPRESSION_LIST", 24, 13);
        zzw = zzbvArray2;
        zzbv[] zzbvArray8 = zzbvArray2;
        zzx = zzbv2 = new zzbv("FN", 25, 51);
        zzbv zzbv19 = zzbv2;
        zzbvArray2 = new zzbv("FOR_IN", 26, 47);
        zzy = zzbvArray2;
        zzbv[] zzbvArray9 = zzbvArray2;
        zzz = zzbv2 = new zzbv("FOR_IN_CONST", 27, 54);
        zzbv zzbv20 = zzbv2;
        zzbvArray2 = new zzbv("FOR_IN_LET", 28, 55);
        zzaa = zzbvArray2;
        zzbv[] zzbvArray10 = zzbvArray2;
        zzab = zzbv2 = new zzbv("FOR_LET", 29, 63);
        zzbv zzbv21 = zzbv2;
        zzbvArray2 = new zzbv("FOR_OF", 30, 64);
        zzac = zzbvArray2;
        zzbv[] zzbvArray11 = zzbvArray2;
        zzad = zzbv2 = new zzbv("FOR_OF_CONST", 31, 65);
        zzbv zzbv22 = zzbv2;
        zzbvArray2 = new zzbv("FOR_OF_LET", 32, 66);
        zzae = zzbvArray2;
        zzbv[] zzbvArray12 = zzbvArray2;
        zzaf = zzbv2 = new zzbv("GET", 33, 15);
        zzbv zzbv23 = zzbv2;
        zzbvArray2 = new zzbv("GET_CONTAINER_VARIABLE", 34, 48);
        zzbm = zzbvArray2;
        zzbv[] zzbvArray13 = zzbvArray2;
        zzag = zzbv2 = new zzbv("GET_INDEX", 35, 16);
        zzbv zzbv24 = zzbv2;
        zzbvArray2 = new zzbv("GET_PROPERTY", 36, 17);
        zzah = zzbvArray2;
        zzbv[] zzbvArray14 = zzbvArray2;
        zzai = zzbv2 = new zzbv("GREATER_THAN", 37, 18);
        zzbv zzbv25 = zzbv2;
        zzbvArray2 = new zzbv("GREATER_THAN_EQUALS", 38, 19);
        zzaj = zzbvArray2;
        zzbv[] zzbvArray15 = zzbvArray2;
        zzak = zzbv2 = new zzbv("IDENTITY_EQUALS", 39, 20);
        zzbv zzbv26 = zzbv2;
        zzbvArray2 = new zzbv("IDENTITY_NOT_EQUALS", 40, 21);
        zzal = zzbvArray2;
        zzbv[] zzbvArray16 = zzbvArray2;
        zzam = zzbv2 = new zzbv("IF", 41, 22);
        zzbv zzbv27 = zzbv2;
        zzbvArray2 = new zzbv("LESS_THAN", 42, 23);
        zzan = zzbvArray2;
        zzbv[] zzbvArray17 = zzbvArray2;
        zzao = zzbv2 = new zzbv("LESS_THAN_EQUALS", 43, 24);
        zzbv zzbv28 = zzbv2;
        zzbvArray2 = new zzbv("MODULUS", 44, 25);
        zzap = zzbvArray2;
        zzbv[] zzbvArray18 = zzbvArray2;
        zzaq = zzbv2 = new zzbv("MULTIPLY", 45, 26);
        zzbv zzbv29 = zzbv2;
        zzbvArray2 = new zzbv("NEGATE", 46, 27);
        zzar = zzbvArray2;
        zzbv[] zzbvArray19 = zzbvArray2;
        zzas = zzbv2 = new zzbv("NOT", 47, 28);
        zzbv zzbv30 = zzbv2;
        zzbvArray2 = new zzbv("NOT_EQUALS", 48, 29);
        zzat = zzbvArray2;
        zzbv[] zzbvArray20 = zzbvArray2;
        zzau = zzbv2 = new zzbv("NULL", 49, 45);
        zzbv zzbv31 = zzbv2;
        zzbvArray2 = new zzbv("OR", 50, 30);
        zzav = zzbvArray2;
        zzbv[] zzbvArray21 = zzbvArray2;
        zzbn = zzbv2 = new zzbv("PLUS_EQUALS", 51, 31);
        zzbv zzbv32 = zzbv2;
        zzbvArray2 = new zzbv("POST_DECREMENT", 52, 32);
        zzaw = zzbvArray2;
        zzbv[] zzbvArray22 = zzbvArray2;
        zzax = zzbv2 = new zzbv("POST_INCREMENT", 53, 33);
        zzbv zzbv33 = zzbv2;
        zzbvArray2 = new zzbv("QUOTE", 54, 46);
        zzay = zzbvArray2;
        object = "PRE_DECREMENT";
        zzbv[] zzbvArray23 = zzbvArray2;
        zzaz = zzbv2 = new zzbv((String)object, 55, 34);
        zzbv zzbv34 = zzbv2;
        zzbvArray2 = new zzbv("PRE_INCREMENT", 56, 35);
        zzba = zzbvArray2;
        zzbv[] zzbvArray24 = zzbvArray2;
        zzbb = zzbv2 = new zzbv("RETURN", 57, 36);
        zzbv zzbv35 = zzbv2;
        zzbvArray2 = new zzbv("SET_PROPERTY", 58, 43);
        zzbc = zzbvArray2;
        zzbv[] zzbvArray25 = zzbvArray2;
        zzbd = zzbv2 = new zzbv("SUBTRACT", 59, 37);
        zzbv zzbv36 = zzbv2;
        zzbvArray2 = new zzbv("SWITCH", 60, 38);
        zzbe = zzbvArray2;
        zzbv[] zzbvArray26 = zzbvArray2;
        zzbf = zzbv2 = new zzbv("TERNARY", 61, 39);
        zzbv zzbv37 = zzbv2;
        n10 = 62;
        zzbvArray2 = new zzbv("TYPEOF", n10, 40);
        zzbg = zzbvArray2;
        zzbv[] zzbvArray27 = zzbvArray2;
        zzbh = zzbv2 = new zzbv("UNDEFINED", 63, 44);
        zzbv zzbv38 = zzbv2;
        zzbvArray2 = new zzbv("VAR", 64, 41);
        zzbi = zzbvArray2;
        int n16 = 42;
        zzbv[] zzbvArray28 = zzbvArray2;
        zzbj = zzbv2 = new zzbv("WHILE", 65, n16);
        int n17 = 66;
        zzbvArray2 = new zzbv[n17];
        zzbvArray2[0] = zzbvArray;
        zzbvArray2[1] = zzbv11;
        zzbvArray2[2] = zzbv10;
        zzbvArray2[3] = object2;
        zzbvArray2[4] = zzbv9;
        zzbvArray2[5] = zzbv8;
        zzbvArray2[6] = zzbv7;
        zzbvArray2[7] = zzbv6;
        zzbvArray2[8] = zzbv5;
        zzbvArray2[9] = zzbv4;
        zzbvArray2[10] = zzbv3;
        zzbvArray2[11] = object3;
        zzbvArray2[12] = zzbv12;
        zzbvArray2[13] = zzbv13;
        zzbvArray2[14] = zzbvArray3;
        zzbvArray2[15] = zzbv14;
        zzbvArray2[16] = zzbvArray4;
        zzbvArray2[17] = zzbv15;
        zzbvArray2[18] = zzbvArray5;
        zzbvArray2[19] = zzbv16;
        zzbvArray2[20] = zzbvArray6;
        zzbvArray2[21] = zzbv17;
        zzbvArray2[22] = zzbvArray7;
        zzbvArray2[23] = zzbv18;
        zzbvArray2[24] = zzbvArray8;
        zzbvArray2[25] = zzbv19;
        zzbvArray2[26] = zzbvArray9;
        zzbvArray2[27] = zzbv20;
        zzbvArray2[28] = zzbvArray10;
        zzbvArray2[29] = zzbv21;
        zzbvArray2[30] = zzbvArray11;
        zzbvArray2[31] = zzbv22;
        zzbvArray2[32] = zzbvArray12;
        zzbvArray2[33] = zzbv23;
        zzbvArray2[34] = zzbvArray13;
        zzbvArray2[35] = zzbv24;
        zzbvArray2[36] = zzbvArray14;
        zzbvArray2[37] = zzbv25;
        zzbvArray2[38] = zzbvArray15;
        zzbvArray2[39] = zzbv26;
        zzbvArray2[40] = zzbvArray16;
        zzbvArray2[41] = zzbv27;
        zzbvArray2[42] = zzbvArray17;
        zzbvArray2[43] = zzbv28;
        zzbvArray2[44] = zzbvArray18;
        zzbvArray2[45] = zzbv29;
        zzbvArray2[46] = zzbvArray19;
        zzbvArray2[47] = zzbv30;
        zzbvArray2[48] = zzbvArray20;
        zzbvArray2[49] = zzbv31;
        zzbvArray2[50] = zzbvArray21;
        zzbvArray2[51] = zzbv32;
        zzbvArray2[52] = zzbvArray22;
        zzbvArray2[53] = zzbv33;
        zzbvArray2[54] = zzbvArray23;
        zzbvArray2[55] = zzbv34;
        zzbvArray2[56] = zzbvArray24;
        zzbvArray2[57] = zzbv35;
        zzbvArray2[58] = zzbvArray25;
        zzbvArray2[59] = zzbv36;
        zzbvArray2[60] = zzbvArray26;
        zzbvArray2[61] = zzbv37;
        zzbvArray2[62] = zzbvArray27;
        zzbvArray2[63] = zzbv38;
        zzbvArray2[64] = zzbvArray28;
        int n18 = 65;
        zzbvArray2[n18] = zzbv2;
        zzbp = zzbvArray2;
        zzbvArray = new HashMap();
        zzbo = zzbvArray;
        zzbvArray = zzbv.values();
        int n19 = zzbvArray.length;
        zzbv5 = null;
        for (int i3 = 0; i3 < n19; i3 += n3) {
            zzbv10 = zzbvArray[i3];
            object3 = zzbo;
            int n20 = zzbv10.zzbq;
            object2 = n20;
            object3.put(object2, zzbv10);
            n3 = 1;
        }
    }

    /*
     * WARNING - Possible parameter corruption
     * WARNING - void declaration
     */
    private zzbv() {
        void var3_2;
        void var2_-1;
        void var1_-1;
        int n4 = 100;
        if (var3_2 <= n4) {
            this.zzbq = var3_2;
            return;
        }
        AssertionError assertionError = new AssertionError((Object)"Native functions over 100 are reserved for runtime implementations.");
        throw assertionError;
    }

    public static zzbv[] values() {
        return (zzbv[])zzbp.clone();
    }

    public static zzbv zza(int n3) {
        Map map2 = zzbo;
        Integer n4 = n3;
        return (zzbv)((Object)map2.get(n4));
    }

    public final String toString() {
        return Integer.valueOf(this.zzbq).toString();
    }
}

