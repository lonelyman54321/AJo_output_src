/*
 * Decompiled with CFR 0.152.
 */
import java.util.HashMap;
import java.util.Map;

public final class uR2$g
extends Enum {
    private static final /* synthetic */ uR2$g[] $VALUES;
    public static final /* enum */ uR2$g CLASS;
    public static final /* enum */ uR2$g UNSUPPORTED;
    private static final Map cache;
    public static final /* enum */ uR2$g clip;
    public static final /* enum */ uR2$g clipPathUnits;
    public static final /* enum */ uR2$g clip_path;
    public static final /* enum */ uR2$g clip_rule;
    public static final /* enum */ uR2$g color;
    public static final /* enum */ uR2$g cx;
    public static final /* enum */ uR2$g cy;
    public static final /* enum */ uR2$g d;
    public static final /* enum */ uR2$g direction;
    public static final /* enum */ uR2$g display;
    public static final /* enum */ uR2$g dx;
    public static final /* enum */ uR2$g dy;
    public static final /* enum */ uR2$g fill;
    public static final /* enum */ uR2$g fill_opacity;
    public static final /* enum */ uR2$g fill_rule;
    public static final /* enum */ uR2$g font;
    public static final /* enum */ uR2$g font_family;
    public static final /* enum */ uR2$g font_size;
    public static final /* enum */ uR2$g font_style;
    public static final /* enum */ uR2$g font_weight;
    public static final /* enum */ uR2$g fx;
    public static final /* enum */ uR2$g fy;
    public static final /* enum */ uR2$g gradientTransform;
    public static final /* enum */ uR2$g gradientUnits;
    public static final /* enum */ uR2$g height;
    public static final /* enum */ uR2$g href;
    public static final /* enum */ uR2$g image_rendering;
    public static final /* enum */ uR2$g marker;
    public static final /* enum */ uR2$g markerHeight;
    public static final /* enum */ uR2$g markerUnits;
    public static final /* enum */ uR2$g markerWidth;
    public static final /* enum */ uR2$g marker_end;
    public static final /* enum */ uR2$g marker_mid;
    public static final /* enum */ uR2$g marker_start;
    public static final /* enum */ uR2$g mask;
    public static final /* enum */ uR2$g maskContentUnits;
    public static final /* enum */ uR2$g maskUnits;
    public static final /* enum */ uR2$g media;
    public static final /* enum */ uR2$g offset;
    public static final /* enum */ uR2$g opacity;
    public static final /* enum */ uR2$g orient;
    public static final /* enum */ uR2$g overflow;
    public static final /* enum */ uR2$g pathLength;
    public static final /* enum */ uR2$g patternContentUnits;
    public static final /* enum */ uR2$g patternTransform;
    public static final /* enum */ uR2$g patternUnits;
    public static final /* enum */ uR2$g points;
    public static final /* enum */ uR2$g preserveAspectRatio;
    public static final /* enum */ uR2$g r;
    public static final /* enum */ uR2$g refX;
    public static final /* enum */ uR2$g refY;
    public static final /* enum */ uR2$g requiredExtensions;
    public static final /* enum */ uR2$g requiredFeatures;
    public static final /* enum */ uR2$g requiredFonts;
    public static final /* enum */ uR2$g requiredFormats;
    public static final /* enum */ uR2$g rx;
    public static final /* enum */ uR2$g ry;
    public static final /* enum */ uR2$g solid_color;
    public static final /* enum */ uR2$g solid_opacity;
    public static final /* enum */ uR2$g spreadMethod;
    public static final /* enum */ uR2$g startOffset;
    public static final /* enum */ uR2$g stop_color;
    public static final /* enum */ uR2$g stop_opacity;
    public static final /* enum */ uR2$g stroke;
    public static final /* enum */ uR2$g stroke_dasharray;
    public static final /* enum */ uR2$g stroke_dashoffset;
    public static final /* enum */ uR2$g stroke_linecap;
    public static final /* enum */ uR2$g stroke_linejoin;
    public static final /* enum */ uR2$g stroke_miterlimit;
    public static final /* enum */ uR2$g stroke_opacity;
    public static final /* enum */ uR2$g stroke_width;
    public static final /* enum */ uR2$g style;
    public static final /* enum */ uR2$g systemLanguage;
    public static final /* enum */ uR2$g text_anchor;
    public static final /* enum */ uR2$g text_decoration;
    public static final /* enum */ uR2$g transform;
    public static final /* enum */ uR2$g type;
    public static final /* enum */ uR2$g vector_effect;
    public static final /* enum */ uR2$g version;
    public static final /* enum */ uR2$g viewBox;
    public static final /* enum */ uR2$g viewport_fill;
    public static final /* enum */ uR2$g viewport_fill_opacity;
    public static final /* enum */ uR2$g visibility;
    public static final /* enum */ uR2$g width;
    public static final /* enum */ uR2$g x;
    public static final /* enum */ uR2$g x1;
    public static final /* enum */ uR2$g x2;
    public static final /* enum */ uR2$g y;
    public static final /* enum */ uR2$g y1;
    public static final /* enum */ uR2$g y2;

    /*
     * Enabled aggressive block sorting
     */
    static {
        uR2$g uR2$g;
        uR2$g uR2$g2;
        uR2$g uR2$g3;
        uR2$g uR2$g4;
        uR2$g uR2$g5;
        uR2$g uR2$g6;
        uR2$g uR2$g7;
        uR2$g uR2$g8;
        uR2$g uR2$g9;
        uR2$g uR2$g10;
        uR2$g uR2$g11;
        uR2$g uR2$g12;
        uR2$g uR2$g13;
        uR2$g uR2$g14;
        uR2$g uR2$g15;
        uR2$g uR2$g16;
        uR2$g uR2$g17;
        uR2$g uR2$g18;
        uR2$g uR2$g19;
        uR2$g uR2$g20;
        uR2$g uR2$g21;
        uR2$g uR2$g22;
        uR2$g uR2$g23;
        uR2$g uR2$g24;
        uR2$g uR2$g25;
        uR2$g uR2$g26;
        uR2$g uR2$g27;
        uR2$g uR2$g28;
        uR2$g uR2$g29;
        uR2$g uR2$g30;
        uR2$g uR2$g31;
        uR2$g uR2$g32;
        uR2$g uR2$g33;
        uR2$g uR2$g34;
        uR2$g uR2$g35;
        uR2$g uR2$g36;
        uR2$g uR2$g37;
        uR2$g uR2$g38;
        uR2$g uR2$g39;
        uR2$g uR2$g40;
        uR2$g uR2$g41;
        uR2$g uR2$g42;
        uR2$g uR2$g43;
        uR2$g uR2$g44;
        uR2$g uR2$g45;
        uR2$g uR2$g46;
        uR2$g uR2$g47;
        uR2$g uR2$g48;
        uR2$g uR2$g49;
        uR2$g[] uR2$gArray = new uR2$g("CLASS", 0);
        CLASS = uR2$gArray;
        clip = uR2$g49 = new uR2$g("clip", 1);
        clip_path = uR2$g48 = new uR2$g("clip_path", 2);
        Object object = new uR2$g("clipPathUnits", 3);
        clipPathUnits = object;
        clip_rule = uR2$g47 = new uR2$g("clip_rule", 4);
        color = uR2$g46 = new uR2$g("color", 5);
        cx = uR2$g45 = new uR2$g("cx", 6);
        int n3 = 7;
        cy = uR2$g44 = new uR2$g("cy", n3);
        int n4 = 8;
        direction = uR2$g43 = new uR2$g("direction", n4);
        int n7 = 9;
        dx = uR2$g42 = new uR2$g("dx", n7);
        int n8 = 10;
        dy = uR2$g41 = new uR2$g("dy", n8);
        fx = uR2$g40 = new uR2$g("fx", 11);
        fy = uR2$g39 = new uR2$g("fy", 12);
        d = uR2$g38 = new uR2$g("d", 13);
        uR2$g uR2$g50 = uR2$g38;
        display = uR2$g37 = new uR2$g("display", 14);
        uR2$g uR2$g51 = uR2$g37;
        fill = uR2$g36 = new uR2$g("fill", 15);
        uR2$g uR2$g52 = uR2$g36;
        fill_rule = uR2$g38 = new uR2$g("fill_rule", 16);
        uR2$g uR2$g53 = uR2$g38;
        fill_opacity = uR2$g35 = new uR2$g("fill_opacity", 17);
        uR2$g uR2$g54 = uR2$g35;
        font = uR2$g36 = new uR2$g("font", 18);
        uR2$g uR2$g55 = uR2$g36;
        font_family = uR2$g38 = new uR2$g("font_family", 19);
        uR2$g uR2$g56 = uR2$g38;
        font_size = uR2$g34 = new uR2$g("font_size", 20);
        uR2$g uR2$g57 = uR2$g34;
        font_weight = uR2$g36 = new uR2$g("font_weight", 21);
        uR2$g uR2$g58 = uR2$g36;
        font_style = uR2$g38 = new uR2$g("font_style", 22);
        uR2$g uR2$g59 = uR2$g38;
        gradientTransform = uR2$g36 = new uR2$g("gradientTransform", 23);
        uR2$g uR2$g60 = uR2$g36;
        gradientUnits = uR2$g33 = new uR2$g("gradientUnits", 24);
        uR2$g uR2$g61 = uR2$g33;
        height = uR2$g36 = new uR2$g("height", 25);
        uR2$g uR2$g62 = uR2$g36;
        href = uR2$g32 = new uR2$g("href", 26);
        uR2$g uR2$g63 = uR2$g32;
        image_rendering = uR2$g36 = new uR2$g("image_rendering", 27);
        uR2$g uR2$g64 = uR2$g36;
        marker = uR2$g31 = new uR2$g("marker", 28);
        uR2$g uR2$g65 = uR2$g31;
        marker_start = uR2$g36 = new uR2$g("marker_start", 29);
        uR2$g uR2$g66 = uR2$g36;
        marker_mid = uR2$g30 = new uR2$g("marker_mid", 30);
        uR2$g uR2$g67 = uR2$g30;
        marker_end = uR2$g36 = new uR2$g("marker_end", 31);
        uR2$g uR2$g68 = uR2$g36;
        markerHeight = uR2$g29 = new uR2$g("markerHeight", 32);
        uR2$g uR2$g69 = uR2$g29;
        markerUnits = uR2$g36 = new uR2$g("markerUnits", 33);
        uR2$g uR2$g70 = uR2$g36;
        markerWidth = uR2$g28 = new uR2$g("markerWidth", 34);
        uR2$g uR2$g71 = uR2$g28;
        mask = uR2$g36 = new uR2$g("mask", 35);
        uR2$g uR2$g72 = uR2$g36;
        maskContentUnits = uR2$g27 = new uR2$g("maskContentUnits", 36);
        uR2$g uR2$g73 = uR2$g27;
        maskUnits = uR2$g36 = new uR2$g("maskUnits", 37);
        uR2$g uR2$g74 = uR2$g36;
        media = uR2$g26 = new uR2$g("media", 38);
        uR2$g uR2$g75 = uR2$g26;
        offset = uR2$g36 = new uR2$g("offset", 39);
        uR2$g uR2$g76 = uR2$g36;
        opacity = uR2$g25 = new uR2$g("opacity", 40);
        uR2$g uR2$g77 = uR2$g25;
        orient = uR2$g36 = new uR2$g("orient", 41);
        uR2$g uR2$g78 = uR2$g36;
        overflow = uR2$g24 = new uR2$g("overflow", 42);
        uR2$g uR2$g79 = uR2$g24;
        pathLength = uR2$g36 = new uR2$g("pathLength", 43);
        uR2$g uR2$g80 = uR2$g36;
        patternContentUnits = uR2$g23 = new uR2$g("patternContentUnits", 44);
        uR2$g uR2$g81 = uR2$g23;
        patternTransform = uR2$g36 = new uR2$g("patternTransform", 45);
        uR2$g uR2$g82 = uR2$g36;
        patternUnits = uR2$g38 = new uR2$g("patternUnits", 46);
        uR2$g uR2$g83 = uR2$g38;
        points = uR2$g36 = new uR2$g("points", 47);
        uR2$g uR2$g84 = uR2$g36;
        preserveAspectRatio = uR2$g22 = new uR2$g("preserveAspectRatio", 48);
        uR2$g uR2$g85 = uR2$g22;
        r = uR2$g36 = new uR2$g("r", 49);
        uR2$g uR2$g86 = uR2$g36;
        refX = uR2$g21 = new uR2$g("refX", 50);
        uR2$g uR2$g87 = uR2$g21;
        refY = uR2$g36 = new uR2$g("refY", 51);
        uR2$g uR2$g88 = uR2$g36;
        requiredFeatures = uR2$g20 = new uR2$g("requiredFeatures", 52);
        uR2$g uR2$g89 = uR2$g20;
        requiredExtensions = uR2$g36 = new uR2$g("requiredExtensions", 53);
        uR2$g uR2$g90 = uR2$g36;
        requiredFormats = uR2$g19 = new uR2$g("requiredFormats", 54);
        uR2$g uR2$g91 = uR2$g19;
        requiredFonts = uR2$g36 = new uR2$g("requiredFonts", 55);
        uR2$g uR2$g92 = uR2$g36;
        rx = uR2$g18 = new uR2$g("rx", 56);
        uR2$g uR2$g93 = uR2$g18;
        ry = uR2$g36 = new uR2$g("ry", 57);
        uR2$g uR2$g94 = uR2$g36;
        solid_color = uR2$g17 = new uR2$g("solid_color", 58);
        uR2$g uR2$g95 = uR2$g17;
        solid_opacity = uR2$g36 = new uR2$g("solid_opacity", 59);
        uR2$g uR2$g96 = uR2$g36;
        spreadMethod = uR2$g16 = new uR2$g("spreadMethod", 60);
        uR2$g uR2$g97 = uR2$g16;
        startOffset = uR2$g36 = new uR2$g("startOffset", 61);
        uR2$g uR2$g98 = uR2$g36;
        stop_color = uR2$g15 = new uR2$g("stop_color", 62);
        uR2$g uR2$g99 = uR2$g15;
        stop_opacity = uR2$g36 = new uR2$g("stop_opacity", 63);
        uR2$g uR2$g100 = uR2$g36;
        stroke = uR2$g14 = new uR2$g("stroke", 64);
        uR2$g uR2$g101 = uR2$g14;
        stroke_dasharray = uR2$g36 = new uR2$g("stroke_dasharray", 65);
        uR2$g uR2$g102 = uR2$g36;
        stroke_dashoffset = uR2$g13 = new uR2$g("stroke_dashoffset", 66);
        uR2$g uR2$g103 = uR2$g13;
        stroke_linecap = uR2$g36 = new uR2$g("stroke_linecap", 67);
        uR2$g uR2$g104 = uR2$g36;
        stroke_linejoin = uR2$g12 = new uR2$g("stroke_linejoin", 68);
        uR2$g uR2$g105 = uR2$g12;
        stroke_miterlimit = uR2$g36 = new uR2$g("stroke_miterlimit", 69);
        uR2$g uR2$g106 = uR2$g36;
        stroke_opacity = uR2$g11 = new uR2$g("stroke_opacity", 70);
        uR2$g uR2$g107 = uR2$g11;
        stroke_width = uR2$g36 = new uR2$g("stroke_width", 71);
        uR2$g uR2$g108 = uR2$g36;
        style = uR2$g10 = new uR2$g("style", 72);
        uR2$g uR2$g109 = uR2$g10;
        systemLanguage = uR2$g36 = new uR2$g("systemLanguage", 73);
        uR2$g uR2$g110 = uR2$g36;
        text_anchor = uR2$g9 = new uR2$g("text_anchor", 74);
        uR2$g uR2$g111 = uR2$g9;
        text_decoration = uR2$g36 = new uR2$g("text_decoration", 75);
        uR2$g uR2$g112 = uR2$g36;
        transform = uR2$g8 = new uR2$g("transform", 76);
        uR2$g uR2$g113 = uR2$g8;
        type = uR2$g36 = new uR2$g("type", 77);
        uR2$g uR2$g114 = uR2$g36;
        vector_effect = uR2$g7 = new uR2$g("vector_effect", 78);
        uR2$g uR2$g115 = uR2$g7;
        version = uR2$g36 = new uR2$g("version", 79);
        uR2$g uR2$g116 = uR2$g36;
        viewBox = uR2$g6 = new uR2$g("viewBox", 80);
        uR2$g uR2$g117 = uR2$g6;
        width = uR2$g36 = new uR2$g("width", 81);
        uR2$g uR2$g118 = uR2$g36;
        x = uR2$g5 = new uR2$g("x", 82);
        uR2$g uR2$g119 = uR2$g5;
        y = uR2$g36 = new uR2$g("y", 83);
        uR2$g uR2$g120 = uR2$g36;
        x1 = uR2$g4 = new uR2$g("x1", 84);
        uR2$g uR2$g121 = uR2$g4;
        y1 = uR2$g36 = new uR2$g("y1", 85);
        uR2$g uR2$g122 = uR2$g36;
        x2 = uR2$g3 = new uR2$g("x2", 86);
        uR2$g uR2$g123 = uR2$g3;
        y2 = uR2$g36 = new uR2$g("y2", 87);
        uR2$g uR2$g124 = uR2$g36;
        viewport_fill = uR2$g2 = new uR2$g("viewport_fill", 88);
        uR2$g uR2$g125 = uR2$g2;
        viewport_fill_opacity = uR2$g36 = new uR2$g("viewport_fill_opacity", 89);
        uR2$g uR2$g126 = uR2$g36;
        visibility = uR2$g = new uR2$g("visibility", 90);
        uR2$g uR2$g127 = uR2$g;
        UNSUPPORTED = uR2$g36 = new uR2$g("UNSUPPORTED", 91);
        int n10 = 92;
        uR2$g[] uR2$gArray2 = new uR2$g[n10];
        char c2 = '\u0000';
        uR2$g38 = null;
        uR2$gArray2[0] = uR2$gArray;
        uR2$gArray2[1] = uR2$g49;
        uR2$gArray2[2] = uR2$g48;
        uR2$gArray2[3] = object;
        uR2$gArray2[4] = uR2$g47;
        uR2$gArray2[5] = uR2$g46;
        uR2$gArray2[6] = uR2$g45;
        uR2$gArray2[7] = uR2$g44;
        uR2$gArray2[8] = uR2$g43;
        uR2$gArray2[9] = uR2$g42;
        uR2$gArray2[10] = uR2$g41;
        uR2$gArray2[11] = uR2$g40;
        uR2$gArray2[12] = uR2$g39;
        uR2$gArray2[13] = uR2$g50;
        uR2$gArray2[14] = uR2$g51;
        uR2$gArray2[15] = uR2$g52;
        uR2$gArray2[16] = uR2$g53;
        uR2$gArray2[17] = uR2$g54;
        uR2$gArray2[18] = uR2$g55;
        uR2$gArray2[19] = uR2$g56;
        uR2$gArray2[20] = uR2$g57;
        uR2$gArray2[21] = uR2$g58;
        uR2$gArray2[22] = uR2$g59;
        uR2$gArray2[23] = uR2$g60;
        uR2$gArray2[24] = uR2$g61;
        uR2$gArray2[25] = uR2$g62;
        uR2$gArray2[26] = uR2$g63;
        uR2$gArray2[27] = uR2$g64;
        uR2$gArray2[28] = uR2$g65;
        uR2$gArray2[29] = uR2$g66;
        uR2$gArray2[30] = uR2$g67;
        uR2$gArray2[31] = uR2$g68;
        uR2$gArray2[32] = uR2$g69;
        uR2$gArray2[33] = uR2$g70;
        uR2$gArray2[34] = uR2$g71;
        uR2$gArray2[35] = uR2$g72;
        uR2$gArray2[36] = uR2$g73;
        uR2$gArray2[37] = uR2$g74;
        uR2$gArray2[38] = uR2$g75;
        uR2$gArray2[39] = uR2$g76;
        uR2$gArray2[40] = uR2$g77;
        uR2$gArray2[41] = uR2$g78;
        uR2$gArray2[42] = uR2$g79;
        uR2$gArray2[43] = uR2$g80;
        uR2$gArray2[44] = uR2$g81;
        uR2$gArray2[45] = uR2$g82;
        uR2$gArray2[46] = uR2$g83;
        uR2$gArray2[47] = uR2$g84;
        uR2$gArray2[48] = uR2$g85;
        uR2$gArray2[49] = uR2$g86;
        uR2$gArray2[50] = uR2$g87;
        uR2$gArray2[51] = uR2$g88;
        uR2$gArray2[52] = uR2$g89;
        uR2$gArray2[53] = uR2$g90;
        uR2$gArray2[54] = uR2$g91;
        uR2$gArray2[55] = uR2$g92;
        uR2$gArray2[56] = uR2$g93;
        uR2$gArray2[57] = uR2$g94;
        uR2$gArray2[58] = uR2$g95;
        uR2$gArray2[59] = uR2$g96;
        uR2$gArray2[60] = uR2$g97;
        uR2$gArray2[61] = uR2$g98;
        uR2$gArray2[62] = uR2$g99;
        uR2$gArray2[63] = uR2$g100;
        uR2$gArray2[64] = uR2$g101;
        uR2$gArray2[65] = uR2$g102;
        uR2$gArray2[66] = uR2$g103;
        uR2$gArray2[67] = uR2$g104;
        uR2$gArray2[68] = uR2$g105;
        uR2$gArray2[69] = uR2$g106;
        uR2$gArray2[70] = uR2$g107;
        uR2$gArray2[71] = uR2$g108;
        uR2$gArray2[72] = uR2$g109;
        uR2$gArray2[73] = uR2$g110;
        uR2$gArray2[74] = uR2$g111;
        uR2$gArray2[75] = uR2$g112;
        uR2$gArray2[76] = uR2$g113;
        uR2$gArray2[77] = uR2$g114;
        uR2$gArray2[78] = uR2$g115;
        uR2$gArray2[79] = uR2$g116;
        uR2$gArray2[80] = uR2$g117;
        uR2$gArray2[81] = uR2$g118;
        uR2$gArray2[82] = uR2$g119;
        uR2$gArray2[83] = uR2$g120;
        uR2$gArray2[84] = uR2$g121;
        uR2$gArray2[85] = uR2$g122;
        uR2$gArray2[86] = uR2$g123;
        uR2$gArray2[87] = uR2$g124;
        uR2$gArray2[88] = uR2$g125;
        uR2$gArray2[89] = uR2$g126;
        uR2$gArray2[90] = uR2$g127;
        int n14 = 91;
        uR2$gArray2[n14] = uR2$g36;
        $VALUES = uR2$gArray2;
        uR2$gArray = new HashMap();
        cache = uR2$gArray;
        uR2$gArray = uR2$g.values();
        int n15 = uR2$gArray.length;
        int n16 = 0;
        uR2$g36 = null;
        while (n16 < n15) {
            int n17;
            uR2$g48 = uR2$gArray[n16];
            uR2$g uR2$g128 = CLASS;
            if (uR2$g48 == uR2$g128) {
                Map map2 = cache;
                object = "class";
                map2.put(object, uR2$g48);
                n17 = 1;
                c2 = '-';
            } else {
                uR2$g uR2$g129 = UNSUPPORTED;
                if (uR2$g48 != uR2$g129) {
                    String string2 = uR2$g48.name();
                    char c3 = '_';
                    c2 = '-';
                    String string3 = string2.replace(c3, c2);
                    object = cache;
                    object.put(string3, uR2$g48);
                } else {
                    c2 = '-';
                }
                n17 = 1;
            }
            n16 += n17;
        }
        return;
    }

    /*
     * WARNING - Possible parameter corruption
     * WARNING - void declaration
     */
    private uR2$g() {
        void var2_-1;
        void var1_-1;
    }

    public static uR2$g fromString(String object) {
        Map map2 = cache;
        if ((object = (uR2$g)((Object)map2.get(object))) != null) {
            return object;
        }
        return UNSUPPORTED;
    }

    public static uR2$g valueOf(String string2) {
        return Enum.valueOf(uR2$g.class, string2);
    }

    public static uR2$g[] values() {
        return (uR2$g[])$VALUES.clone();
    }
}

